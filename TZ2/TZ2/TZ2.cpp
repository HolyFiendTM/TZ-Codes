#include <iostream> //подключаем библиотеку для ввода-вывода
#include <fstream> //подключаем библиотеку для работы с файлами
#include <string> //подключаем библиотеку для работы со строками (в данном случае для работы getline())
using namespace std;
int main()
{
    /*
    ifstream f; //создаём объект f для чтения файла
    f.open("CreativeTask2.txt"); //открываем файл и связываем его с объектом f
    int max_count = 0; //переменная, показывающая количество раз, сколько встретилась самая часто употребляемая буква
    int count = 0; //переменная, показывающая количество раз, сколько встретилась рассматриваемая буква (которая меняется на каждой итерации внешнего цикла)
    string s; //создаём строку s
    getline(f, s); //копируем данные объекта f в строку s
    f.close(); //закрываем файл
    for (int i = 65; i <= 90; i++) { //перебор десятичного значения для каждой прописной латинской буквы в ASCII таблице (иначе говоря, перебор рассматриваемой буквы)
        int flag = 0; //переменная, показывающая, встречается ли в строке s рассматриваемая буква (0 - нет, 1 - да)
        for (int j = 0; j < s.size(); j++) { //проходимся по всей строке
            if (s[j] == char(i)) { //если символ строки - это рассматриваемая буква, то 
                flag = 1; //переменная flag равна 1
                count++; //переменная count увеличивается на 1
            }
        }
        max_count = max(max_count, count); //в переменную max_count заносим максимальное значение между max_count и count
        count = 0; //сбрасываем count (чтобы заново начать считать количество раз, сколько встретится следующая рассматриваемая буква в строке s)
        if (flag == 1) { //если рассматриваемая буква встречается в строке, то
            cout << char(i); //выводим эту букву
        }
    }
    cout << max_count; //выводим количество раз, сколько встретилась самая часто употребляемая буква
    //общая идея: перебираем все буквы латинского алфавита; чекаем, есть ли рассматриваемая буква в строке и в каком количестве; если есть, то сразу выводим, также увеличиваем count на 1 (сразу сравниваем с max_count и заносим туда наибольшее значение) 
    */
    ifstream f; //создаём объект f для чтения файла
    f.open("CreativeTask2.txt"); //открываем файл и связываем его с объектом f
    string s; //создаём строку s
    getline(f, s); //копируем данные объекта f в строку s
    f.close(); //закрываем файл
    int a[26]; //создаём массив, состоящий из 26 элементов (на каждую букву латинского алфавита по элементу, хранящему значение, показывающее количество раз, сколько встретилась рассматриваемая буква)
    for (int i = 0; i < 26; i++) { //проходимся по всему массиву a
        a[i] = 0; //приравниваем каждый элемент к 0 (чтобы потом можно было увеличивать на 1 элемент массива, когда встречается рассматриваемая буква)
    }
    for (int i = 0; i < s.size(); i++) { //проходимся по строке s
        int tmp = int(s[i]); //в новую переменную tmp записываем числовой эквивалент символа s[i] из строки s (по ASCII таблице)
        tmp = tmp - 65; //подводим значение переменной tmp так, чтобы её можно было использовать в качестве индекса массива a 
        a[tmp]++; //увеличиваем значение элемента tmp в массиве a на 1 (то есть находим в массиве a элемент, "отвечающий" за рассматриваемую букву, и увеличиваем его на 1)
    }
    int max_count = 0; //инициализируем переменную max_count, которая будет содержать количество раз, сколько встретилась самая часто употребляемая буква
    for (int i = 0; i < 26; i++) { //проходимся по массиву a
        if (a[i] > 0) { //если элемент массива не ноль (то есть буква в строке s нашлась), то
            cout << char(i + 65); //выводим символ (букву), эквивалентную числовому значению в ASCII таблице (и не забываем "подвести" это числовое значение к нужному в ASCII таблице)
        }
        max_count = max(max_count, a[i]); //в max_count заносим максимальное значение между max_count и элементом i в массиве a (сравниваем текущий max_count и каждый элемент массива a (ведь они отвечают за количество раз, сколько встретилась рассматриваемая буква)
    }
    cout << max_count; //выводим количество раз, сколько встретилась самая часто употребляемая буква
    //общая идея: у каждой буквы есть свой элемент в массиве a, нашли букву - увеличили этот элемент на 1; в конце проходимся по массиву a и выводим буквы, у которых значение элемента больше 0, сразу же заносим в max_count наибольшее значение между max_count и значением ячейки
}


